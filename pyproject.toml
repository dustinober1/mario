[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mario-rl"
version = "1.0.0"
description = "Deep Reinforcement Learning agent for Super Mario Bros"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Reinforcement Learning Engineer", email = "developer@example.com"}
]
maintainers = [
    {name = "Reinforcement Learning Engineer", email = "developer@example.com"}
]
keywords = ["reinforcement-learning", "mario", "ppo", "gym", "stable-baselines3"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Games/Entertainment :: Arcade",
]
requires-python = ">=3.8"
dependencies = [
    "gym>=0.21.0",
    "stable-baselines3>=1.8.0",
    "torch>=2.0.0",
    "torchvision>=0.15.1",
    "numpy>=1.24.3",
    "gym-super-mario-bros>=7.4.0",
    "nes-py>=8.2.1",
    "matplotlib>=3.7.1",
    "seaborn>=0.12.2",
    "pandas>=2.0.1",
    "plotly>=5.14.1",
    "tensorboard>=2.13.0",
    "wandb>=0.15.3",
    "tqdm>=4.65.0",
    "Pillow>=9.5.0",
    "requests>=2.30.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-html>=3.2.0",
    "pytest-xdist>=3.3.1",
    "pytest-mock>=3.11.1",
    "pytest-benchmark>=4.0.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "pre-commit>=3.3.2",
    "safety>=2.3.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.5",
]

[project.scripts]
mario-rl = "mario_rl.cli.main:main"

[project.urls]
Homepage = "https://github.com/dustinober1/mario"
Documentation = "https://github.com/dustinober1/mario#readme"
Repository = "https://github.com/dustinober1/mario"
Issues = "https://github.com/dustinober1/mario/issues"
Changelog = "https://github.com/dustinober1/mario/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mario_rl"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=mario_rl",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--durations=10",
    "--maxfail=5",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "mario: marks tests specific to Mario environment",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]
minversion = "6.0"

[tool.coverage.run]
source = ["src/mario_rl"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
